name: Release
on:
 workflow_dispatch:
  inputs:
   version:
    description: 'The version for the relase. If not set defaults to auto resolved version'
    required: false

jobs:
 test_latest:
  name: Test with latest depndency versions
  runs-on: ubuntu-latest

  steps:
   - name: Checkout
     uses: actions/checkout@v2

   - name: Validate composer.json
     run: composer validate

   - name: Get Composer Cache Directory
     id: composer-cache
     run: echo "::set-output name=dir::$(composer config cache-files-dir)"
   - name: Setup cache
     uses: actions/cache@v2
     with:
      path: ${{ steps.composer-cache.outputs.dir }}
      key: ${{ runner.os }}-composer-latest
      restore-keys: ${{ runner.os }}-composer-latest

   - name: Install dependencies
     if: steps.composer-cache.outputs.cache-hit != 'true'
     run: composer update --prefer-dist --no-ansi --no-interaction --no-progress

   - name: Run CI tools
     run: composer ci-all

 test_lowest:
  name: Test with lowest dependency versions
  runs-on: ubuntu-latest

  steps:
   - name: Checkout
     uses: actions/checkout@v2

   - name: Validate composer.json
     run: composer validate

   - name: Get Composer Cache Directory
     id: composer-cache
     run: echo "::set-output name=dir::$(composer config cache-files-dir)"
   - name: Setup cache
     uses: actions/cache@v2
     with:
      path: ${{ steps.composer-cache.outputs.dir }}
      key: ${{ runner.os }}-composer-lowest
      restore-keys: ${{ runner.os }}-composer-lowest

   - name: Install dependencies
     if: steps.composer-cache.outputs.cache-hit != 'true'
     run: composer update --prefer-dist --no-ansi --no-interaction --no-progress --prefer-lowest

   - name: Run CI tools
     run: composer ci-all

 release_version:
  name: Find release version
  runs-on: ubuntu-latest
  outputs:
   version: ${{ steps.version_input.outputs.version || steps.version_drafter.outputs.next-version }}

  steps:
   - name: Use version from input
     id: version_input
     if: github.event.inputs.version
     run: echo "::set-output name=version::${{ github.event.inputs.version }}"
   - name: checkout
     uses: actions/checkout@v2
   - name: calculate next version
     id: version_drafter
     uses: patrickjahns/version-drafter-action@v1
     env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
   - name: debug
     run: echo ${{ format('{0}', steps.version_drafter.outputs.next-version) }}
   - name: Desperation
     if: false
     uses: release-drafter/release-drafter@v5
     env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

 update_changelog:
  name: Update the changelog with the current relase version
  runs-on: ubuntu-latest
  if: needs.release_version.outputs.version
  needs:
   - test_lowest
   - test_latest
   - release_version

  steps:
   - name: checkout
     uses: actions/checkout@v2

   - name: create changelog
     uses: charmixer/auto-changelog-action@v1.1
     with:
      token: ${{ secrets.GITHUB_TOKEN }}
      exclude_labels: "duplicate,question,invalid,wontfix,skip-changelog"
      future_release: ${{ format('{0}', needs.release_version.outputs.version) }}

   - name: commit updated changelog
     uses: EndBug/add-and-commit@v5
     with:
      message: "[CHANGELOG] Updated changelog"
      add: "CHANGELOG.md"
      signoff: true
     env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

 publish_release:
  name: Update changelog and publish release
  runs-on: ubuntu-latest
  if: needs.release_version.outputs.version
  needs:
   - test_lowest
   - test_latest
   - release_version
   - update_changelog

  steps:
   - name: Publish release
     uses: release-drafter/release-drafter@v5
     with:
      version: ${{ format('{0}', needs.release_version.outputs.version) }}
      tag: ${{ format('{0}', needs.release_version.outputs.version) }}
      name: ${{ format('{0}', needs.release_version.outputs.version) }}
      publish: true
     env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
